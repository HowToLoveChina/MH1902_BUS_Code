<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\MH1902.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\MH1902.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Aug 16 09:57:55 2019
<BR><P>
<H3>Maximum Stack Usage =        272 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CPU_Contact_AnalyzeReceivePacket &rArr; ISO14443_4_HalfDuplexExchange &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1d]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[2a]">fputc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">fputc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from mhscpu_it.o(i.BusFault_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[12]">CRYPT0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[21]">DCMI_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from mhscpu_it.o(i.DebugMon_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[19]">EXTI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from mhscpu_it.o(i.HardFault_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[26]">IMG_COP_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[d]">LCD_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[22]">MSR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from mhscpu_it.o(i.MemManage_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from mhscpu_it.o(i.NMI_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from mhscpu_it.o(i.PendSV_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[e]">SCI0_IRQHandler</a> from mhscpu_emv_hard.o(i.SCI0_IRQHandler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1b]">SENSOR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[11]">SPI0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[24]">SPI1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[25]">SPI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1e]">SSC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from mhscpu_it.o(i.SVC_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_mhscpu.o(i.SystemInit) referenced from startup_mhscpu.o(.text)
 <LI><a href="#[13]">TIM0_0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[14]">TIM0_1_IRQHandler</a> from timer.o(i.TIM0_1_IRQHandler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[15]">TIM0_2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[16]">TIM0_3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1f]">TIM0_4_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[20]">TIM0_5_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1c]">TRNG_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[c]">USBDMA_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[b]">USB_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from mhscpu_it.o(i.UsageFault_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[29]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mhscpu.o(.text)
 <LI><a href="#[2a]">fputc</a> from uart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[27]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[29]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[33]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[86]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[87]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[88]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[89]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[8a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6f]"></a>delayus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, delay.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>CRYPT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IMG_COP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>MSR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SENSOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>USBDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_AnalyzeReceivePacket
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[93]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[94]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[95]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CPU_Contact_AnalyzeReceivePacket</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, packet.o(i.CPU_Contact_AnalyzeReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CPU_Contact_AnalyzeReceivePacket &rArr; ISO14443_4_HalfDuplexExchange &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>CPU_Proximity_AnalyzeReceivePacket</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, packet.o(i.CPU_Proximity_AnalyzeReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CPU_Proximity_AnalyzeReceivePacket &rArr; pcd_rats_a &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mhscpu_it.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugMon_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPIO_Init</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, mhscpu_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[3d]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, mhscpu_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[3e]"></a>GPIO_ResetBits</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, mhscpu_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_ResetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[3f]"></a>GPIO_SetBits</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, mhscpu_gpio.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_poweron
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ISO14443_4_HalfDuplexExchange</STRONG> (Thumb, 1174 bytes, Stack size 88 bytes, iso14443_4.o(i.ISO14443_4_HalfDuplexExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ISO14443_4_HalfDuplexExchange &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Contact_AnalyzeReceivePacket
</UL>

<P><STRONG><a name="[43]"></a>M1_AnalyzeReceivePacket</STRONG> (Thumb, 968 bytes, Stack size 56 bytes, packet.o(i.M1_AnalyzeReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = M1_AnalyzeReceivePacket &rArr; pcd_cascaded_anticoll &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_auth_state
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>NVIC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>NVIC_Init</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SCI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(i.SCI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCI0_IRQHandler &rArr; SCIx_IRQHandler &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI_Cmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mhscpu_spi.o(i.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[50]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mhscpu_spi.o(i.SPI_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
</UL>

<P><STRONG><a name="[51]"></a>SPI_Init</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, mhscpu_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Init &rArr; SPI_MasterSlaveModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSlaveModeSet
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[52]"></a>SPI_MasterSlaveModeSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mhscpu_spi.o(i.SPI_MasterSlaveModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_MasterSlaveModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SPI_MasterSlaveModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[82]"></a>SPI_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_spi.o(i.SPI_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
</UL>

<P><STRONG><a name="[81]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_spi.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SYSCTRL_APBPeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(i.SYSCTRL_APBPeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>SYSCTRL_APBPeriphResetCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(i.SYSCTRL_APBPeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[66]"></a>SYSCTRL_GetClocksFreq</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(i.SYSCTRL_GetClocksFreq))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[56]"></a>SYSCTRL_HCLKConfig</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_HCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_HCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>SYSCTRL_PCLKConfig</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_PCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>SYSCTRL_PLLConfig</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>SYSCTRL_SPI_MasterSlaveModeSet</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(i.SYSCTRL_SPI_MasterSlaveModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSlaveModeSet
</UL>

<P><STRONG><a name="[59]"></a>SYSCTRL_SYSCLKSourceSelect</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_SYSCLKSourceSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_SYSCLKSourceSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>SendPacket</STRONG> (Thumb, 438 bytes, Stack size 24 bytes, packet.o(i.SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendPacket &rArr; UART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system_mhscpu.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SYSCTRL_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIM0_1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(i.TIM0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM0_1_IRQHandler &rArr; TIM_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mhscpu_timer.o(i.TIM_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_1_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>TIM_Cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mhscpu_timer.o(i.TIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[5e]"></a>TIM_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mhscpu_timer.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_DeInit &rArr; SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
</UL>

<P><STRONG><a name="[5f]"></a>TIM_ITConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mhscpu_timer.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
</UL>

<P><STRONG><a name="[60]"></a>TIM_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mhscpu_timer.o(i.TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Init &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
</UL>

<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 436 bytes, Stack size 8 bytes, uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART0_SendByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.UART0_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
</UL>

<P><STRONG><a name="[84]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
</UL>

<P><STRONG><a name="[65]"></a>UART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, mhscpu_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
</UL>

<P><STRONG><a name="[63]"></a>UART_IsTXEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_IsTXEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
</UL>

<P><STRONG><a name="[61]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[96]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[37]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Contact_AnalyzeReceivePacket
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[98]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[99]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3b]"></a>assert_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[6b]"></a>clear_bit_mask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mh523.o(i.clear_bit_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[62]"></a>complete_Packet</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, uart.o(i.complete_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>delayms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, delay.o(i.delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
</UL>

<P><STRONG><a name="[2a]"></a>fputc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = fputc &rArr;  fputc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXEmpty
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[77]"></a>get_diff_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.get_diff_tick))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>

<P><STRONG><a name="[35]"></a>get_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.get_tick))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Contact_AnalyzeReceivePacket
</UL>

<P><STRONG><a name="[70]"></a>gpio_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gpio.o(i.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gpio_config &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>init_timer0</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, timer.o(i.init_timer0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_timer0 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = main &rArr; CPU_Contact_AnalyzeReceivePacket &rArr; ISO14443_4_HalfDuplexExchange &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolflag_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPacket
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_AnalyzeReceivePacket
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Proximity_AnalyzeReceivePacket
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Contact_AnalyzeReceivePacket
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[76]"></a>mdelay</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, timer.o(i.mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_diff_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
</UL>

<P><STRONG><a name="[78]"></a>pcd_antenna_off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mh523.o(i.pcd_antenna_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pcd_antenna_off &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
</UL>

<P><STRONG><a name="[79]"></a>pcd_antenna_on</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mh523.o(i.pcd_antenna_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pcd_antenna_on &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
</UL>

<P><STRONG><a name="[47]"></a>pcd_auth_state</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mifare.o(i.pcd_auth_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pcd_auth_state &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_AnalyzeReceivePacket
</UL>

<P><STRONG><a name="[45]"></a>pcd_cascaded_anticoll</STRONG> (Thumb, 614 bytes, Stack size 64 bytes, iso14443a.o(i.pcd_cascaded_anticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pcd_cascaded_anticoll &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_AnalyzeReceivePacket
</UL>

<P><STRONG><a name="[46]"></a>pcd_cascaded_select</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, iso14443a.o(i.pcd_cascaded_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pcd_cascaded_select &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_AnalyzeReceivePacket
</UL>

<P><STRONG><a name="[42]"></a>pcd_com_transceive</STRONG> (Thumb, 1084 bytes, Stack size 56 bytes, mh523.o(i.pcd_com_transceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_auth_state
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>

<P><STRONG><a name="[7b]"></a>pcd_config</STRONG> (Thumb, 542 bytes, Stack size 16 bytes, mh523.o(i.pcd_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pcd_config &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init
</UL>

<P><STRONG><a name="[7c]"></a>pcd_delay_sfgi</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, mh523.o(i.pcd_delay_sfgi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pcd_delay_sfgi &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
</UL>

<P><STRONG><a name="[74]"></a>pcd_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mh523.o(i.pcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pcd_init &rArr; pcd_config &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_poweron
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>pcd_poweron</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(i.pcd_poweron))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pcd_poweron &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init
</UL>

<P><STRONG><a name="[39]"></a>pcd_rats_a</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, iso14443a.o(i.pcd_rats_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pcd_rats_a &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Proximity_AnalyzeReceivePacket
</UL>

<P><STRONG><a name="[48]"></a>pcd_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mifare.o(i.pcd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pcd_read &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_AnalyzeReceivePacket
</UL>

<P><STRONG><a name="[44]"></a>pcd_request</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, iso14443a.o(i.pcd_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pcd_request &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_AnalyzeReceivePacket
</UL>

<P><STRONG><a name="[7e]"></a>pcd_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mh523.o(i.pcd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pcd_reset &rArr; write_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init
</UL>

<P><STRONG><a name="[41]"></a>pcd_set_tmo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mh523.o(i.pcd_set_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pcd_set_tmo &rArr; write_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_auth_state
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>

<P><STRONG><a name="[49]"></a>pcd_write</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, mifare.o(i.pcd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pcd_write &rArr; pcd_com_transceive &rArr; set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_AnalyzeReceivePacket
</UL>

<P><STRONG><a name="[75]"></a>protocolflag_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.protocolflag_init))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>read_reg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mh523.o(i.read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_auth_state
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[7a]"></a>set_bit_mask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mh523.o(i.set_bit_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[73]"></a>spi_config</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, spi.o(i.spi_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = spi_config &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>spi_read_byte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi.o(i.spi_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_read_byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>

<P><STRONG><a name="[7f]"></a>spi_write_byte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi.o(i.spi_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_write_byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[72]"></a>uart_Config</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, uart.o(i.uart_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_Config &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>write_reg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mh523.o(i.write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_auth_state
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3a]"></a>GPIO_GetGPIONum</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, mhscpu_gpio.o(i.GPIO_GetGPIONum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[4d]"></a>FLUSH_QUEUE</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(i.FLUSH_QUEUE))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>SCIx_IRQHandler</STRONG> (Thumb, 1056 bytes, Stack size 32 bytes, mhscpu_emv_hard.o(i.SCIx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCIx_IRQHandler &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLUSH_QUEUE
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI0_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>SET_ERR</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(i.SET_ERR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[6a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[69]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
