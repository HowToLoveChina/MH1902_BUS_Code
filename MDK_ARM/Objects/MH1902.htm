<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\MH1902.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\MH1902.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Nov 14 11:06:47 2019
<BR><P>
<H3>Maximum Stack Usage =       3860 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SerJRReaderHandle &rArr; pro_APDU_PSAM &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1d]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[2b]">fputc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">fputc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from mhscpu_it.o(i.BusFault_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[12]">CRYPT0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[21]">DCMI_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from mhscpu_it.o(i.DebugMon_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[19]">EXTI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2a]">FLASH_Operate</a> from mhscpu_flash.o(i.FLASH_Operate) referenced from mhscpu_flash.o(i.FLASH_Operate)
 <LI><a href="#[2]">HardFault_Handler</a> from mhscpu_it.o(i.HardFault_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[26]">IMG_COP_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2c]">KEY0_ReadPin</a> from key.o(i.KEY0_ReadPin) referenced from key.o(.data)
 <LI><a href="#[2d]">KEY1_ReadPin</a> from key.o(i.KEY1_ReadPin) referenced from key.o(.data)
 <LI><a href="#[2e]">KEY2_ReadPin</a> from key.o(i.KEY2_ReadPin) referenced from key.o(.data)
 <LI><a href="#[2f]">KEY3_ReadPin</a> from key.o(i.KEY3_ReadPin) referenced from key.o(.data)
 <LI><a href="#[30]">KEY4_ReadPin</a> from key.o(i.KEY4_ReadPin) referenced from key.o(.data)
 <LI><a href="#[31]">KEY5_ReadPin</a> from key.o(i.KEY5_ReadPin) referenced from key.o(.data)
 <LI><a href="#[d]">LCD_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[22]">MSR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from mhscpu_it.o(i.MemManage_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from mhscpu_it.o(i.NMI_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from mhscpu_it.o(i.PendSV_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[e]">SCI0_IRQHandler</a> from mhscpu_emv_hard.o(i.SCI0_IRQHandler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1b]">SENSOR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[11]">SPI0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[24]">SPI1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[25]">SPI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1e]">SSC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from mhscpu_it.o(i.SVC_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_mhscpu.o(i.SystemInit) referenced from startup_mhscpu.o(.text)
 <LI><a href="#[13]">TIM0_0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[14]">TIM0_1_IRQHandler</a> from timer.o(i.TIM0_1_IRQHandler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[15]">TIM0_2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[16]">TIM0_3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1f]">TIM0_4_IRQHandler</a> from psam_bsp.o(i.TIM0_4_IRQHandler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[20]">TIM0_5_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1c]">TRNG_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[c]">USBDMA_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[b]">USB_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from mhscpu_it.o(i.UsageFault_Handler) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[29]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mhscpu.o(.text)
 <LI><a href="#[2b]">fputc</a> from uart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[27]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[29]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[32]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[11e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[120]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[121]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>CRYPT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IMG_COP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>MSR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SENSOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>USBDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>emv_tell_case</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, emv_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_extract
</UL>

<P><STRONG><a name="[3a]"></a>emv_t1_compute_lrc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, emv_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
</UL>

<P><STRONG><a name="[34]"></a>emv_t1_extract</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emv_t1_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_tell_case
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[37]"></a>emv_t1_iblock_pack</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emv_t1_iblock_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[38]"></a>emv_t1_block_xmit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_fill
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_compute_lrc
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[3d]"></a>emv_t1_block_recv</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emv_t1_block_recv &rArr; emv_queue_spill
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_compute_lrc
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[40]"></a>emv_atr_analyser</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emv_atr_analyser &rArr; emv_queue_spill
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_condsel_procedure
</UL>

<P><STRONG><a name="[41]"></a>emv_atr_parse</STRONG> (Thumb, 650 bytes, Stack size 32 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emv_atr_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_const_table
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_const_table
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
</UL>

<P><STRONG><a name="[44]"></a>emv_t0_exchange</STRONG> (Thumb, 896 bytes, Stack size 80 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = emv_t0_exchange &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_fill
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_tell_case
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
</UL>

<P><STRONG><a name="[46]"></a>emv_t1_exchange</STRONG> (Thumb, 918 bytes, Stack size 1608 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684<LI>Call Chain = emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_iblock_pack
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
</UL>

<P><STRONG><a name="[47]"></a>emv_t1_ifsd_request</STRONG> (Thumb, 190 bytes, Stack size 528 bytes, emv_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[fe]"></a>emv_core_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emv_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
</UL>

<P><STRONG><a name="[4f]"></a>emv_core_register</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, emv_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
</UL>

<P><STRONG><a name="[122]"></a>emv_core_devs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, emv_queue.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>emv_queue_flush</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, emv_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
</UL>

<P><STRONG><a name="[48]"></a>emv_queue_empty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, emv_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
</UL>

<P><STRONG><a name="[123]"></a>emv_queue_length</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, emv_queue.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>emv_queue_fill</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, emv_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = emv_queue_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
</UL>

<P><STRONG><a name="[3f]"></a>emv_queue_spill</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, emv_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emv_queue_spill
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_timeout_type
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
</UL>

<P><STRONG><a name="[124]"></a>iso7816_get_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iso7816_3.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>iso7816_lib_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iso7816_3.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>iso7816_lib_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iso7816_3.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>sci_getv</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, iso7816_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sci_getv
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
</UL>

<P><STRONG><a name="[4c]"></a>iso7816_device_init</STRONG> (Thumb, 220 bytes, Stack size 136 bytes, iso7816_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = iso7816_device_init &rArr; sci_getv
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_getv
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_core_register
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
</UL>

<P><STRONG><a name="[50]"></a>iso7816_init</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, iso7816_3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_disturb_interruption
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_parse
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_atr_parse
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
</UL>

<P><STRONG><a name="[59]"></a>iso7816_exchange</STRONG> (Thumb, 302 bytes, Stack size 1072 bytes, iso7816_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2756<LI>Call Chain = iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_disturb_interruption
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_APDU_PSAM
</UL>

<P><STRONG><a name="[5b]"></a>iso7816_close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, iso7816_3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
</UL>

<P><STRONG><a name="[5c]"></a>iso7816_detect</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, iso7816_3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_detect
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_disturb_interruption
</UL>

<P><STRONG><a name="[5e]"></a>Read_CardSlotInfo</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iso7816_3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
</UL>

<P><STRONG><a name="[5f]"></a>Write_CardSlotInfo</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iso7816_3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
</UL>

<P><STRONG><a name="[42]"></a>fi_const_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emv_fidi_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_parse
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_atr_parse
</UL>

<P><STRONG><a name="[43]"></a>di_const_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emv_fidi_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_parse
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_atr_parse
</UL>

<P><STRONG><a name="[127]"></a>fi_const_index</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, emv_fidi_table.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>di_const_index</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, emv_fidi_table.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>adjust_timeout_type</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, emv_patch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
</UL>

<P><STRONG><a name="[56]"></a>iso_atr_parse</STRONG> (Thumb, 838 bytes, Stack size 40 bytes, emv_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_const_table
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_const_table
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[60]"></a>iso_condsel_procedure</STRONG> (Thumb, 118 bytes, Stack size 128 bytes, emv_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[57]"></a>iso_pps_procedure</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, emv_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_const_table
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_fill
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_const_table
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_APDU_PSAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_send_ADPU
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_iblock_pack
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_extract
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_Receive
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSAM_TestCommond
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_analy_atr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolflag_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_APDU_PSAM
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_condsel_procedure
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10d]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameter_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_getv
</UL>

<P><STRONG><a name="[63]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_Receive
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[12d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[12e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[12f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6a]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[6d]"></a>AT24CXX_Read</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, 24cxx.o(i.AT24CXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AT24CXX_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigDataNew
</UL>

<P><STRONG><a name="[73]"></a>AT24CXX_Write</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, 24cxx.o(i.AT24CXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AT24CXX_Write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigDataNew
</UL>

<P><STRONG><a name="[7a]"></a>BPK_IsReady</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_bpk.o(i.BPK_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_WriteKey
</UL>

<P><STRONG><a name="[74]"></a>BPK_KeyReadLock</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mhscpu_bpk.o(i.BPK_KeyReadLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BPK_KeyReadLock
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_ReadUnlockFun
</UL>

<P><STRONG><a name="[76]"></a>BPK_KeyWriteLock</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mhscpu_bpk.o(i.BPK_KeyWriteLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BPK_KeyWriteLock
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBPK
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_WriteUnlockFun
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_WriteLockFun
</UL>

<P><STRONG><a name="[77]"></a>BPK_Lock</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mhscpu_bpk.o(i.BPK_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BPK_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBPK
</UL>

<P><STRONG><a name="[78]"></a>BPK_ReadUnlockFun</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bpk.o(i.BPK_ReadUnlockFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BPK_ReadUnlockFun &rArr; BPK_KeyReadLock
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_KeyReadLock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBPK
</UL>

<P><STRONG><a name="[79]"></a>BPK_WriteKey</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mhscpu_bpk.o(i.BPK_WriteKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BPK_WriteKey
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBPK
</UL>

<P><STRONG><a name="[7b]"></a>BPK_WriteLockFun</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bpk.o(i.BPK_WriteLockFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BPK_WriteLockFun &rArr; BPK_KeyWriteLock
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_KeyWriteLock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBPK
</UL>

<P><STRONG><a name="[7c]"></a>BPK_WriteUnlockFun</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bpk.o(i.BPK_WriteUnlockFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BPK_WriteUnlockFun &rArr; BPK_KeyWriteLock
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_KeyWriteLock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBPK
</UL>

<P><STRONG><a name="[7d]"></a>BSP_LED_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, led.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LED_Init &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>Cal_CRC16</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, ymodem.o(i.Cal_CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Cal_CRC16 &rArr; UpdateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_RecvPacket
</UL>

<P><STRONG><a name="[ef]"></a>CaptureCardType</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, contactlessapi.o(i.CaptureCardType))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadCardSn
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mhscpu_it.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugMon_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DownloadFirmware</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, download.o(i.DownloadFirmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = DownloadFirmware &rArr; YModem_Receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_Receive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_Int2Str
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_SerialSendStr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_JumpToApplication
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>FLASH_ErasePage</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mhscpu_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_Operate
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashEease
</UL>

<P><STRONG><a name="[91]"></a>FLASH_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mhscpu_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UpdataProgram
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UpdataParam
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashEease
</UL>

<P><STRONG><a name="[89]"></a>FLASH_ProgramWord</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, mhscpu_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_Operate
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UpdataProgram
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UpdataParam
</UL>

<P><STRONG><a name="[99]"></a>FLASH_UnProtect</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, mhscpu_flash.o(i.FLASH_UnProtect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_UnProtect
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UpdataParam
</UL>

<P><STRONG><a name="[90]"></a>FLASH_Unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mhscpu_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UpdataProgram
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UpdataParam
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashEease
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_Init</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, mhscpu_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_bsp_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_init
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, mhscpu_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_Bspinit
</UL>

<P><STRONG><a name="[8c]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, mhscpu_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_ReadPin
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_ReadPin
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_ReadPin
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_ReadPin
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0_ReadPin
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_ResetBits</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, mhscpu_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_ResetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_write_dat
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_SetBits</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, mhscpu_gpio.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_write_dat
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_Display
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_bsp_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[d1]"></a>GetKey</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, key.o(i.GetKey))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyValue
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mhscpu_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IAP_FlashEease</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, iap_flash.o(i.IAP_FlashEease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IAP_FlashEease &rArr; FLASH_ErasePage &rArr; FLASH_Operate
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_Receive
</UL>

<P><STRONG><a name="[87]"></a>IAP_JumpToApplication</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, download.o(i.IAP_JumpToApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_JumpToApplication
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadFirmware
</UL>

<P><STRONG><a name="[92]"></a>IAP_SerialGetByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ymodem.o(i.IAP_SerialGetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_SerialGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsRXReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_RecvByte
</UL>

<P><STRONG><a name="[95]"></a>IAP_SerialSendByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ymodem.o(i.IAP_SerialSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_SerialSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_SendByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_SerialSendStr
</UL>

<P><STRONG><a name="[83]"></a>IAP_SerialSendStr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ymodem.o(i.IAP_SerialSendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_SerialSendStr &rArr; IAP_SerialSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_SerialSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadFirmware
</UL>

<P><STRONG><a name="[98]"></a>IAP_UpdataParam</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, iap_flash.o(i.IAP_UpdataParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_UpdataParam &rArr; FLASH_ProgramWord &rArr; FLASH_Operate
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UnProtect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_Receive
</UL>

<P><STRONG><a name="[9a]"></a>IAP_UpdataProgram</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iap_flash.o(i.IAP_UpdataProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_UpdataProgram &rArr; FLASH_ProgramWord &rArr; FLASH_Operate
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_Receive
</UL>

<P><STRONG><a name="[9b]"></a>IIC_Ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, 24cxx.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_Ack &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[9c]"></a>IIC_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, 24cxx.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Init &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>IIC_NAck</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, 24cxx.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_NAck &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[71]"></a>IIC_Read_Byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, 24cxx.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>

<P><STRONG><a name="[6f]"></a>IIC_Send_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, 24cxx.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Send_Byte &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>

<P><STRONG><a name="[6e]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, 24cxx.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_Start &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>

<P><STRONG><a name="[72]"></a>IIC_Stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, 24cxx.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_Stop &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>

<P><STRONG><a name="[70]"></a>IIC_Wait_Ack</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, 24cxx.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>

<P><STRONG><a name="[9e]"></a>ISO14443_4_HalfDuplexExchange</STRONG> (Thumb, 1208 bytes, Stack size 88 bytes, iso14443_4.o(i.ISO14443_4_HalfDuplexExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ISO14443_4_HalfDuplexExchange &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_APDU
</UL>

<P><STRONG><a name="[a4]"></a>ISO7816_Bspinit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, 7816.o(i.ISO7816_Bspinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ISO7816_Bspinit &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_ConfigEMV
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(i.Is_Leap_Year))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[a6]"></a>LED_Control</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, led.o(i.LED_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LED_Control &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>Mystrcmp</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, psamapi.o(i.Mystrcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Mystrcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSAM_TestCommond
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>NVIC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>NVIC_Init</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[aa]"></a>PSAM_TestCommond</STRONG> (Thumb, 506 bytes, Stack size 520 bytes, psamapi.o(i.PSAM_TestCommond))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = PSAM_TestCommond &rArr; ReadConfigData &rArr; ReadConfigDataNew &rArr; AT24CXX_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigData
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mystrcmp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>PubGetVar</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, 24cxx.o(i.PubGetVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PubGetVar &rArr; getvar &rArr; ReadConfigData &rArr; ReadConfigDataNew &rArr; AT24CXX_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getvar
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadJRreaderTerminalParam
</UL>

<P><STRONG><a name="[b0]"></a>PubSaveVar</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, 24cxx.o(i.PubSaveVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PubSaveVar &rArr; savevar &rArr; SaveConfigData &rArr; SaveConfigDataNew &rArr; AT24CXX_Write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savevar
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftVersionStat
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHardVersionStat
</UL>

<P><STRONG><a name="[b2]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mhscpu_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Is_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>RTC_Get</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>RTC_GetCounter</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, mhscpu_rtc.o(i.RTC_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_GetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Is_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[b7]"></a>RTC_Get_Week</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, rtc.o(i.RTC_Get_Week))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_IRQHandler &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>RTC_Is_Ready</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_rtc.o(i.RTC_Is_Ready))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRefRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetCounter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
</UL>

<P><STRONG><a name="[b9]"></a>RTC_ResetCounter</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, mhscpu_rtc.o(i.RTC_ResetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_ResetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Is_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[ba]"></a>RTC_Set</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, rtc.o(i.RTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RTC_Set &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRefRegister
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
</UL>

<P><STRONG><a name="[b8]"></a>RTC_SetAlarm</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mhscpu_rtc.o(i.RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Is_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>RTC_SetRefRegister</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mhscpu_rtc.o(i.RTC_SetRefRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetRefRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Is_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[ac]"></a>ReadConfigData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, 24cxx.o(i.ReadConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReadConfigData &rArr; ReadConfigDataNew &rArr; AT24CXX_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigDataNew
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSAM_TestCommond
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getvar
</UL>

<P><STRONG><a name="[bc]"></a>ReadConfigDataNew</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, 24cxx.o(i.ReadConfigDataNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadConfigDataNew &rArr; AT24CXX_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigData
</UL>

<P><STRONG><a name="[bd]"></a>ReadJRreaderTerminalParam</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, 24cxx.o(i.ReadJRreaderTerminalParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadJRreaderTerminalParam &rArr; PubGetVar &rArr; getvar &rArr; ReadConfigData &rArr; ReadConfigDataNew &rArr; AT24CXX_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PubGetVar
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameter_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
</UL>

<P><STRONG><a name="[be]"></a>ReadKeyStatus</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, key.o(i.ReadKeyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadKeyStatus &rArr; Get_Key_Level
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Key_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_1_IRQHandler
</UL>

<P><STRONG><a name="[e]"></a>SCI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(i.SCI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCI0_IRQHandler &rArr; SCIx_IRQHandler &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>SCI_ConfigEMV</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, mhscpu_emv_hard.o(i.SCI_ConfigEMV))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCI_ConfigEMV
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_sci_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_Bspinit
</UL>

<P><STRONG><a name="[fd]"></a>SCI_MatchBaudReg</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, mhscpu_emv_hard.o(i.SCI_MatchBaudReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCI_MatchBaudReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
</UL>

<P><STRONG><a name="[c4]"></a>SPI_Cmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mhscpu_spi.o(i.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[c5]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mhscpu_spi.o(i.SPI_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
</UL>

<P><STRONG><a name="[c6]"></a>SPI_Init</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, mhscpu_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Init &rArr; SPI_MasterSlaveModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSlaveModeSet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[c7]"></a>SPI_MasterSlaveModeSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mhscpu_spi.o(i.SPI_MasterSlaveModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_MasterSlaveModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SPI_MasterSlaveModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[11b]"></a>SPI_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_spi.o(i.SPI_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
</UL>

<P><STRONG><a name="[11a]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_spi.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>SYSCTRL_APBPeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(i.SYSCTRL_APBPeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>SYSCTRL_APBPeriphResetCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(i.SYSCTRL_APBPeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>SYSCTRL_GetClocksFreq</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(i.SYSCTRL_GetClocksFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPWMSetStructInit
</UL>

<P><STRONG><a name="[cb]"></a>SYSCTRL_HCLKConfig</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_HCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_HCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>SYSCTRL_PCLKConfig</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_PCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>SYSCTRL_PLLConfig</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>SYSCTRL_SPI_MasterSlaveModeSet</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(i.SYSCTRL_SPI_MasterSlaveModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSlaveModeSet
</UL>

<P><STRONG><a name="[ce]"></a>SYSCTRL_SYSCLKSourceSelect</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(i.SYSCTRL_SYSCLKSourceSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_SYSCLKSourceSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>SaveConfigData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, 24cxx.o(i.SaveConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SaveConfigData &rArr; SaveConfigDataNew &rArr; AT24CXX_Write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigDataNew
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSAM_TestCommond
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savevar
</UL>

<P><STRONG><a name="[cf]"></a>SaveConfigDataNew</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, 24cxx.o(i.SaveConfigDataNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SaveConfigDataNew &rArr; AT24CXX_Write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigData
</UL>

<P><STRONG><a name="[d0]"></a>SendKeyValue</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, jrreader.o(i.SendKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendKeyValue &rArr; UART0_SendBuf &rArr; UART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendBuf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>SerJRReaderHandle</STRONG> (Thumb, 3198 bytes, Stack size 544 bytes, jrreader.o(i.SerJRReaderHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 3340<LI>Call Chain = SerJRReaderHandle &rArr; pro_APDU_PSAM &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Control
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_Display
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendBuf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftVersionStat
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHardVersionStat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBPK
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadJRreaderTerminalParam
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_APDU_PSAM
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mystrcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_APDU
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>SetHardVersionStat</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, 24cxx.o(i.SetHardVersionStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SetHardVersionStat &rArr; PubSaveVar &rArr; savevar &rArr; SaveConfigData &rArr; SaveConfigDataNew &rArr; AT24CXX_Write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PubSaveVar
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameter_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>SetSoftVersionStat</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, 24cxx.o(i.SetSoftVersionStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SetSoftVersionStat &rArr; PubSaveVar &rArr; savevar &rArr; SaveConfigData &rArr; SaveConfigDataNew &rArr; AT24CXX_Write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PubSaveVar
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameter_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system_mhscpu.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SYSCTRL_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIM0_1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM0_1_IRQHandler &rArr; ReadKeyStatus &rArr; Get_Key_Level
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM0_4_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, psam_bsp.o(i.TIM0_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM0_4_IRQHandler &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>TIMER_Configuration</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(i.TIMER_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_Configuration &rArr; TIM_PWMInit &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_init
</UL>

<P><STRONG><a name="[e1]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mhscpu_timer.o(i.TIM_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_4_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>TIM_Cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mhscpu_timer.o(i.TIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_4_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>TIM_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mhscpu_timer.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_DeInit &rArr; SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
</UL>

<P><STRONG><a name="[e6]"></a>TIM_ITConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mhscpu_timer.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
</UL>

<P><STRONG><a name="[e7]"></a>TIM_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mhscpu_timer.o(i.TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Init &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
</UL>

<P><STRONG><a name="[e4]"></a>TIM_PWMInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, mhscpu_timer.o(i.TIM_PWMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_PWMInit &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
</UL>

<P><STRONG><a name="[e8]"></a>TimerPWMSetStructInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer.o(i.TimerPWMSetStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerPWMSetStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_init
</UL>

<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 498 bytes, Stack size 8 bytes, uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler &rArr; protocolflag_init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolflag_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>UART0_SendBuf</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart.o(i.UART0_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_SendBuf &rArr; UART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadCardSn
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyValue
</UL>

<P><STRONG><a name="[eb]"></a>UART0_SendByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.UART0_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendBuf
</UL>

<P><STRONG><a name="[10e]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>UART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, mhscpu_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
</UL>

<P><STRONG><a name="[93]"></a>UART_IsRXReceived</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_IsRXReceived))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_SerialGetByte
</UL>

<P><STRONG><a name="[96]"></a>UART_IsTXEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_IsTXEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_SerialSendByte
</UL>

<P><STRONG><a name="[94]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_SerialGetByte
</UL>

<P><STRONG><a name="[97]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_SerialSendByte
</UL>

<P><STRONG><a name="[80]"></a>UpdateCRC16</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ymodem.o(i.UpdateCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_CRC16
</UL>

<P><STRONG><a name="[ed]"></a>UploadCardSn</STRONG> (Thumb, 162 bytes, Stack size 216 bytes, jrreader.o(i.UploadCardSn))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = UploadCardSn &rArr; pro_GetCardID &rArr; pcd_cascaded_anticoll &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendBuf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_GetCardID
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaptureCardType
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>YModem_Int2Str</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, ymodem.o(i.YModem_Int2Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = YModem_Int2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadFirmware
</UL>

<P><STRONG><a name="[84]"></a>YModem_Receive</STRONG> (Thumb, 436 bytes, Stack size 1104 bytes, ymodem.o(i.YModem_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = YModem_Receive &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_SendByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_RecvPacket
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UpdataProgram
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UpdataParam
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashEease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadFirmware
</UL>

<P><STRONG><a name="[f2]"></a>YModem_RecvByte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ymodem.o(i.YModem_RecvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = YModem_RecvByte &rArr; IAP_SerialGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_SerialGetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_RecvPacket
</UL>

<P><STRONG><a name="[f0]"></a>YModem_RecvPacket</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, ymodem.o(i.YModem_RecvPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = YModem_RecvPacket &rArr; Cal_CRC16 &rArr; UpdateCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_RecvByte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_Receive
</UL>

<P><STRONG><a name="[f1]"></a>YModem_SendByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ymodem.o(i.YModem_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = YModem_SendByte &rArr; IAP_SerialSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_SerialSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YModem_Receive
</UL>

<P><STRONG><a name="[f3]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[130]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[81]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSAM_TestCommond
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[131]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[132]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[133]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[134]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[75]"></a>assert_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_Lock
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_KeyWriteLock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_KeyReadLock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[d4]"></a>beep</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gpio.o(i.beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = beep &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyValue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_GetCardID
</UL>

<P><STRONG><a name="[f7]"></a>clear_bit_mask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mh523.o(i.clear_bit_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[d2]"></a>crc16</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, crc.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadCardSn
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyValue
</UL>

<P><STRONG><a name="[85]"></a>delayms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, delay.o(i.delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadFirmware
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_reset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigDataNew
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigDataNew
</UL>

<P><STRONG><a name="[f9]"></a>delayus</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, delay.o(i.delayus))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_Receive
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_send_byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_rcv_byte
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_iso7816_send_ADPU
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_send_ADPU
</UL>

<P><STRONG><a name="[dc]"></a>dig_Display</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, digital.o(i.dig_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dig_Display &rArr; dig_write_dat &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_write_dat
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
</UL>

<P><STRONG><a name="[fb]"></a>dig_bsp_init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, digital.o(i.dig_bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dig_bsp_init &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_write_dat
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>dig_write_dat</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, digital.o(i.dig_write_dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dig_write_dat &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_Display
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_bsp_init
</UL>

<P><STRONG><a name="[53]"></a>emv_disturb_interruption</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(i.emv_disturb_interruption))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
</UL>

<P><STRONG><a name="[55]"></a>emv_hard_cold_reset</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(i.emv_hard_cold_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = emv_hard_cold_reset &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_condsel_procedure
</UL>

<P><STRONG><a name="[fc]"></a>emv_hard_config</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mhscpu_emv_hard.o(i.emv_hard_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_MatchBaudReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
</UL>

<P><STRONG><a name="[5d]"></a>emv_hard_detect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(i.emv_hard_detect), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
</UL>

<P><STRONG><a name="[4e]"></a>emv_hard_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(i.emv_hard_init))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
</UL>

<P><STRONG><a name="[45]"></a>emv_hard_power_dump</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(i.emv_hard_power_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emv_hard_power_dump &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_condsel_procedure
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_close
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
</UL>

<P><STRONG><a name="[54]"></a>emv_hard_power_pump</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, mhscpu_emv_hard.o(i.emv_hard_power_pump))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emv_hard_power_pump &rArr; emv_hard_power_dump &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_core_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_condsel_procedure
</UL>

<P><STRONG><a name="[58]"></a>emv_hard_warm_reset</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(i.emv_hard_warm_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = emv_hard_warm_reset &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
</UL>

<P><STRONG><a name="[3c]"></a>emv_hard_xmit</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(i.emv_hard_xmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
</UL>

<P><STRONG><a name="[c1]"></a>emv_sci_reset</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(i.emv_sci_reset))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_ConfigEMV
</UL>

<P><STRONG><a name="[2b]"></a>fputc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = fputc &rArr;  fputc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXEmpty
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[af]"></a>getvar</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, 24cxx.o(i.getvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getvar &rArr; ReadConfigData &rArr; ReadConfigDataNew &rArr; AT24CXX_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PubGetVar
</UL>

<P><STRONG><a name="[ff]"></a>gpio_config</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gpio.o(i.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gpio_config &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>init_timer0</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timer.o(i.init_timer0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_timer0 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>iso7816_analy_atr</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, psam.o(i.iso7816_analy_atr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iso7816_analy_atr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_reset
</UL>

<P><STRONG><a name="[102]"></a>iso7816_rcv_byte</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, psam_bsp.o(i.iso7816_rcv_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iso7816_rcv_byte &rArr; psam_data_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_data_set
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_reset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_iso7816_send_ADPU
</UL>

<P><STRONG><a name="[105]"></a>iso7816_send_ADPU</STRONG> (Thumb, 412 bytes, Stack size 560 bytes, psam.o(i.iso7816_send_ADPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = iso7816_send_ADPU &rArr; psam_iso7816_send_ADPU &rArr; iso7816_rcv_byte &rArr; psam_data_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_iso7816_send_ADPU
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_APDU_PSAM
</UL>

<P><STRONG><a name="[107]"></a>iso7816_send_byte</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, psam_bsp.o(i.iso7816_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iso7816_send_byte &rArr; psam_data_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_data_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_iso7816_send_ADPU
</UL>

<P><STRONG><a name="[51]"></a>isvalid_channel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(i.isvalid_channel))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CardSlotInfo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CardSlotInfo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_close
</UL>

<P><STRONG><a name="[109]"></a>key_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, key.o(i.key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = key_init &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 314 bytes, Stack size 520 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3860<LI>Call Chain = main &rArr; SerJRReaderHandle &rArr; pro_APDU_PSAM &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorityGrouping
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_Receive
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolflag_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameter_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer0
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dig_bsp_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadCardSn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftVersionStat
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHardVersionStat
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyValue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSAM_TestCommond
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_Bspinit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownloadFirmware
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10b]"></a>parameter_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, 24cxx.o(i.parameter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = parameter_init &rArr; ReadJRreaderTerminalParam &rArr; PubGetVar &rArr; getvar &rArr; ReadConfigData &rArr; ReadConfigDataNew &rArr; AT24CXX_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSoftVersionStat
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHardVersionStat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadJRreaderTerminalParam
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>pasm_rst_write</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, psam_bsp.o(i.pasm_rst_write))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_reset
</UL>

<P><STRONG><a name="[db]"></a>pcd_antenna_off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mh523.o(i.pcd_antenna_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pcd_antenna_off &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
</UL>

<P><STRONG><a name="[da]"></a>pcd_antenna_on</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mh523.o(i.pcd_antenna_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pcd_antenna_on &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
</UL>

<P><STRONG><a name="[10f]"></a>pcd_cascaded_anticoll</STRONG> (Thumb, 614 bytes, Stack size 64 bytes, iso14443a.o(i.pcd_cascaded_anticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pcd_cascaded_anticoll &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_GetCardID
</UL>

<P><STRONG><a name="[110]"></a>pcd_cascaded_select</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, iso14443a.o(i.pcd_cascaded_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pcd_cascaded_select &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_GetCardID
</UL>

<P><STRONG><a name="[a3]"></a>pcd_com_transceive</STRONG> (Thumb, 1084 bytes, Stack size 56 bytes, mh523.o(i.pcd_com_transceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pcd_com_transceive &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>

<P><STRONG><a name="[a1]"></a>pcd_delay_sfgi</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, mh523.o(i.pcd_delay_sfgi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pcd_delay_sfgi &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>

<P><STRONG><a name="[111]"></a>pcd_hlta</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, iso14443a.o(i.pcd_hlta))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pcd_hlta &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_GetCardID
</UL>

<P><STRONG><a name="[112]"></a>pcd_rats_a</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, iso14443a.o(i.pcd_rats_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pcd_rats_a &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_GetCardID
</UL>

<P><STRONG><a name="[113]"></a>pcd_request</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, iso14443a.o(i.pcd_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pcd_request &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_GetCardID
</UL>

<P><STRONG><a name="[a2]"></a>pcd_set_tmo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mh523.o(i.pcd_set_tmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pcd_set_tmo &rArr; write_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>

<P><STRONG><a name="[d6]"></a>pro_APDU</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, contactlessapi.o(i.pro_APDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pro_APDU &rArr; ISO14443_4_HalfDuplexExchange &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
</UL>

<P><STRONG><a name="[d7]"></a>pro_APDU_PSAM</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, psamapi.o(i.pro_APDU_PSAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 2796<LI>Call Chain = pro_APDU_PSAM &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_send_ADPU
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
</UL>

<P><STRONG><a name="[ee]"></a>pro_GetCardID</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, contactlessapi.o(i.pro_GetCardID))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pro_GetCardID &rArr; pcd_cascaded_anticoll &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadCardSn
</UL>

<P><STRONG><a name="[ea]"></a>protocolflag_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.protocolflag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protocolflag_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>psam_data_read</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, psam_bsp.o(i.psam_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_rcv_byte
</UL>

<P><STRONG><a name="[103]"></a>psam_data_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, psam_bsp.o(i.psam_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = psam_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_send_byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_rcv_byte
</UL>

<P><STRONG><a name="[108]"></a>psam_data_write</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, psam_bsp.o(i.psam_data_write))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_send_byte
</UL>

<P><STRONG><a name="[114]"></a>psam_init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, psam_bsp.o(i.psam_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = psam_init &rArr; tim_pwm_init &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_power_on
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_data_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pasm_rst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_reset
</UL>

<P><STRONG><a name="[106]"></a>psam_iso7816_send_ADPU</STRONG> (Thumb, 894 bytes, Stack size 32 bytes, psam.o(i.psam_iso7816_send_ADPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = psam_iso7816_send_ADPU &rArr; iso7816_rcv_byte &rArr; psam_data_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_send_byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_rcv_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_send_ADPU
</UL>

<P><STRONG><a name="[117]"></a>psam_power_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, psam_bsp.o(i.psam_power_on))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_init
</UL>

<P><STRONG><a name="[d8]"></a>psam_reset</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, psam.o(i.psam_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = psam_reset &rArr; psam_init &rArr; tim_pwm_init &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pasm_rst_write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_rcv_byte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_analy_atr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
</UL>

<P><STRONG><a name="[f8]"></a>read_reg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mh523.o(i.read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[b1]"></a>savevar</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, 24cxx.o(i.savevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = savevar &rArr; SaveConfigData &rArr; SaveConfigDataNew &rArr; AT24CXX_Write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PubSaveVar
</UL>

<P><STRONG><a name="[52]"></a>select_slot</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(i.select_slot))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_SCIWarmReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CardSlotInfo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CardSlotInfo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_close
</UL>

<P><STRONG><a name="[a0]"></a>set_bit_mask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mh523.o(i.set_bit_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_bit_mask &rArr; read_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>

<P><STRONG><a name="[10a]"></a>spi_config</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, spi.o(i.spi_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = spi_config &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>spi_read_byte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi.o(i.spi_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_read_byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>

<P><STRONG><a name="[118]"></a>spi_write_byte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi.o(i.spi_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_write_byte &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[116]"></a>tim_pwm_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, psam_bsp.o(i.tim_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tim_pwm_init &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPWMSetStructInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psam_init
</UL>

<P><STRONG><a name="[d9]"></a>tst_SCIWarmReset</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, 7816.o(i.tst_SCIWarmReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tst_SCIWarmReset &rArr; iso7816_device_init &rArr; sci_getv
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_parse
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>uart_Config</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, uart.o(i.uart_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uart_Config &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>uart_cmd_Receive</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uart.o(i.uart_cmd_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_cmd_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>writeBPK</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bpk.o(i.writeBPK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = writeBPK &rArr; BPK_WriteUnlockFun &rArr; BPK_KeyWriteLock
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_WriteKey
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_Lock
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_KeyWriteLock
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_WriteUnlockFun
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_WriteLockFun
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPK_ReadUnlockFun
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerJRReaderHandle
</UL>

<P><STRONG><a name="[9f]"></a>write_reg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mh523.o(i.write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_reg &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a]"></a>GPIO_GetGPIONum</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, mhscpu_gpio.o(i.GPIO_GetGPIONum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[c2]"></a>FLUSH_QUEUE</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(i.FLUSH_QUEUE))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>SCIx_IRQHandler</STRONG> (Thumb, 1056 bytes, Stack size 32 bytes, mhscpu_emv_hard.o(i.SCIx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCIx_IRQHandler &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLUSH_QUEUE
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI0_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>SET_ERR</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(i.SET_ERR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>

<P><STRONG><a name="[2a]"></a>FLASH_Operate</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mhscpu_flash.o(i.FLASH_Operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mhscpu_flash.o(i.FLASH_Operate)
</UL>
<P><STRONG><a name="[a8]"></a>NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[bf]"></a>Get_Key_Level</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, key.o(i.Get_Key_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Key_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyStatus
</UL>

<P><STRONG><a name="[2c]"></a>KEY0_ReadPin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(i.KEY0_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY0_ReadPin &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>KEY1_ReadPin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(i.KEY1_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY1_ReadPin &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>KEY2_ReadPin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(i.KEY2_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY2_ReadPin &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>KEY3_ReadPin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(i.KEY3_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY3_ReadPin &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>KEY4_ReadPin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(i.KEY4_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY4_ReadPin &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>KEY5_ReadPin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, key.o(i.KEY5_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KEY5_ReadPin &rArr; KEY4_ReadPin &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_ReadPin
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[f6]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
